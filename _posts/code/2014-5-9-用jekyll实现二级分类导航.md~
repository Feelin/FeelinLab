---
layout: post
categories: code
tags: jekyll
---

jekyll是比较简单的，没什么学习成本，不过为了实现二级导航还需要绕点弯子，我利用的是jekyll里面的**tags**和**categories**来实现的。需求是先把博客分为四个大栏目，每个栏目下面可根据文章类型再一步细分。也就每篇文章都有一个所属的栏目(categories)和类型(tags)，而且某个栏目下有哪些类型的文章是确定的，不会在一个栏目下面显示出其他栏目的文章类型。我看到网上有些人的分类方法是用js去获取json信息，然后过滤掉一些文章。其实并不需要这样，因为用jekyll本身的语法就可以实现这个功能。具体代码请看[我的github][github]。

我的四个栏目都是用一个相同的default.html模板,其实如果这四个页面有不同需求的话也可以根据需要新建四个不同的模板文件放在_layout文件夹中，对我来说这四个模板只有导航的高亮有区别。实在无法容忍为了一两行代码不同而复制整个文件的代码。所以我是用js去截取url判断当前位置，然后高亮导航栏。而每个栏目里是根据**categories**的不同来取出不同栏目的文章。拿*代码*栏目做举例，首先在code.html里面声明全局变量。
<pre>
	---
	layout: default
	title: 代码
	name: code
	tags: [js,html,css,PHP,C,C++,opencv,Node.Js,jekyll]
	---
</pre>

这里的`name`和`tags`就是实现二级分类导航的关键，在下面会解释。首先根据*categories*来过滤文章，这里的`page.name`就是上文说初始化的变量。这样就可以遍历取出所有**categories**为*code*的文章。

	{/% for post in site.categories[page.name] /%}
	        <li class="acticle-box /{/{post.tags[0]/}/}">
			/{/{ post.tags[0] /}/}                     /*类型
			/{/{ post.title /}/}                       /*标题		
			/{/{ post.date | date_to_string /}/}       /*日期
			/{/{ post.excerpt /}/}                     /*简要  
			<a class="readmore" href="/{/{ site.baseurl /}/}/{/{ post.url /}/}">继续阅读</a>
		</li>
	{/% endfor /%}
 
注意在上面我已经在每个`li`元素的class上加上了文章对应的*tags*，这使得接下来根据*tags*过滤变得简单。我们先输出此栏目下的所有*tags*。用两层循环来比较tags是否属于当前的栏目(categories)，是就输出。当前栏目的所有可能标签存在`page.tags`中，也就是一开始我们在文件头声明的*tags*数组。


	{/% for tags in site.tags /%}
	{/% for pagetag in page.tags /%}
	  {/% if pagetag == tags[0] /%}
	     /{/{ tags | first /}/}            /*标签名称
	    /{/{ tags | last | size /}/}       /*属于该标签的文章数量
	  {/% endif /%}
	{/% endfor /%}
	{/% endfor /%} 


当点击某个类型(tags)时候我们就用js把所有`li`元素隐藏，只让class拥有对应*tags*的元素显示，这样便实现了我们要的二级导航效果。

[github]:https://github.com/Feelin/FeelinLab





